##############################################################################

# Function to convert .bib files to a data frame
convert_to_df <- function(bib_file) {
  # Read the .bib file
  bib_data <- ReadBib(bib_file)
  
  # Get the base name of the file
  file_name <- tools::file_path_sans_ext(basename(bib_file))
  
  # Convert each entry to a df and add file name as a new column
  entry_dfs <- lapply(bib_data, function(entry) {
    entry_df <- as.data.frame(as.list(entry), stringsAsFactors = FALSE)
    entry_df <- rownames_to_column(entry_df, var = "key")  # Add row names as a new column
    entry_df$project <- file_name  # Add the project (file name)
    return(entry_df)
  })
  
  # Combine the dfs
  bind_rows(entry_dfs)
}

##############################################################################

# Function to create df of BibTeX loading errors
load_bibtex_with_errors <- function(bib_file) {
  errors <- data.frame(
    line = integer(),
    key = character(),
    error = character(),
    project = character(),
    stringsAsFactors = FALSE
  )
  
  # Function to capture warnings and messages
  capture_warnings <- function(w) {
    # Extract the message
    message_text <- conditionMessage(w)
    
    # Regular expression to capture the key, line number, and error message
    regex <- "Ignoring entry '([^']+)'\\s*\\(line(\\d+)\\)\\s*because:\\s*(.+)"
    
    if (grepl(regex, message_text)) {
      key <- sub(regex, "\\1", message_text)
      line <- as.integer(sub(regex, "\\2", message_text))
      error_message <- sub(regex, "\\3", message_text)
      
      # Add to the errors data frame
      errors <<- rbind(errors, data.frame(
        line = line,
        key = key,
        error = error_message,
        project = basename(bib_file),  # Add the project column with the file name
        stringsAsFactors = FALSE
      ))
    }
  }
  
  # Use tryCatch and withCallingHandlers to capture warnings and errors
  tryCatch({
    withCallingHandlers({
      # Attempt to read the BibTeX file
      bib_entries <- ReadBib(bib_file)
    }, warning = capture_warnings, message = capture_warnings)
  }, error = function(e) {
    # Capture any errors during reading the BibTeX file
    errors <<- rbind(errors, data.frame(
      line = NA,
      key = "N/A",
      error = conditionMessage(e),
      project = basename(bib_file),  # Add the project column with the file name
      stringsAsFactors = FALSE
    ))
  })
  
  return(errors)
}

##############################################################################

# Function to load and split summaries.txt
split_summaries <- function(file_path, output_dir) {
  summaries <- readLines(file_path)
  key <- NULL
  title <- NULL
  author <- NULL
  summary_content <- NULL
  
  for (line in summaries) {
    if (startsWith(line, "#")) {  # Check if it's a heading
      if (!is.null(key)) {
        # Save the previous summary content to a file (without title and author)
        writeLines(summary_content, file.path(output_dir, paste0(key, ".txt")))
      }
      # Update key and reset summary_content
      key <- gsub("^#\\s*", "", line)
      summary_content <- NULL
    } else if (startsWith(line, "Title:")) {
      # Extract title if line starts with "Title:"
      title <- gsub("^Title:\\s*", "", line)
    } else if (startsWith(line, "Author:")) {
      # Extract author if line starts with "Author:"
      author <- gsub("^Author:\\s*", "", line)
    } else {
      summary_content <- c(summary_content, line)
    }
  }
  
  # Save the last summary
  if (!is.null(key)) {
    writeLines(summary_content, file.path(output_dir, paste0(key, ".txt")))
  }
}